// This program is partially copied from https://www.creativity-ape.com/entry/2020/12/16/232928

#include <avr/pgmspace.h> 

const int N_Positive_Pins = 4;
const int Positive_Pins[] = { 3, 6, 10, 13 };
const int N_Negative_Pins = 3;
const int Negative_Pins[] = { 5, 9, 11 };

const int N_SWs = 7;
const int SWs[] = { A0, A1, A2, A3, A4, A5, 4, 8 };

PROGMEM const unsigned char FastGamma8[] = { // not used
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 
  4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 
  9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
  16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 23, 23, 24, 
  25, 25, 26, 26, 27, 28, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 
  36, 36, 37, 38, 39, 39, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 
  49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
  64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
  81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 
  100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 118, 119, 
  121, 122, 123, 125, 126, 127, 129, 130, 132, 133, 135, 136, 138, 139, 141, 142, 
  144, 145, 147, 148, 150, 151, 153, 154, 156, 157, 159, 160, 162, 164, 165, 167, 
  169, 170, 172, 173, 175, 177, 178, 180, 182, 183, 185, 187, 189, 190, 192, 194, 
  196, 197, 199, 201, 203, 204, 206, 208, 210, 212, 213, 215, 217, 219, 221, 223, 
  225, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254,
};

PROGMEM const unsigned char FasterGamma8[] = {
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
  0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 
  4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 
  7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13, 
  13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 
  21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 31, 
  32, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44, 
  45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 
  62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 79, 80, 81, 
  83, 84, 86, 87, 88, 90, 91, 93, 95, 96, 98, 99, 101, 103, 104, 106, 
  108, 109, 111, 113, 114, 116, 118, 120, 122, 123, 125, 127, 129, 131, 133, 135, 
  137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 158, 160, 162, 164, 166, 169, 
  171, 173, 176, 178, 180, 183, 185, 188, 190, 193, 195, 198, 200, 203, 205, 208, 
  210, 213, 216, 218, 221, 224, 227, 229, 232, 235, 238, 241, 244, 247, 250, 253, 
};

PROGMEM const unsigned char Gamma8[] = { // not used
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2,
  2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5,
  5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10,
  10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
  17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
  25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
  37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
  51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
  69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
  90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 109, 110, 112, 114,
  115, 117, 119, 120, 122, 124, 126, 127, 129, 131, 133, 135, 137, 138, 140, 142,
  144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 167, 169, 171, 173, 175,
  177, 180, 182, 184, 186, 189, 191, 193, 196, 198, 200, 203, 205, 208, 210, 213,
  215, 218, 220, 223, 225, 228, 231, 233, 236, 239, 241, 244, 247, 249, 252, 255
};

PROGMEM const unsigned char Linear8[] = { // not used
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
  64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
  80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
  96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
  208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
  224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
  240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
};

float value = 0.1;

const int Max_Value = 255;
const int Dimming_Range = 90; // magic number
const float Threshold = 0.065; // magic number

int randSeed = 0;

void setup() {
  Serial.begin(9600);
  for (int n = 0; n < N_Positive_Pins; ++n) {
    pinMode(Positive_Pins[n], OUTPUT);
  }
  for (int n = 0; n < N_Negative_Pins; ++n) {
    pinMode(Negative_Pins[n], OUTPUT);
  }
  for (int n = 0; n < N_SWs; ++n) {
    pinMode(SWs[n], INPUT_PULLUP);
  }
  for (int n = 0; n < N_SWs; ++n) {
    int s = digitalRead(SWs[n]);
    randSeed |= ((s & 0x01) << n);
  }
  Serial.print("randSeed = ");
  Serial.println(randSeed);
  randomSeed(randSeed);
}

void loop() {
  if (value < 0.5) {
    value = value + 2.0 * value * value;
  }
  else if (value >= 0.5) {
    value = value - 2.0 * (1.0 - value) * (1.0 - value);
  }

  if (value <= (0.0 + Threshold) || (1.0 - Threshold) <= value) {
    value = random(0.0 + (Threshold * 1000.0), 1000.0 - (Threshold * 1000.0)) / 1000.0;
  }

  int value_p = Max_Value - Dimming_Range + (value * Dimming_Range);
  int value_n = Max_Value - (value * Dimming_Range);

  for (int n = 0; n < N_Positive_Pins; ++n) {
    analogWrite(Positive_Pins[n], pgm_read_byte(&(FasterGamma8[value_p])));
  }
  for (int n = 0; n < N_Negative_Pins; ++n) {
    analogWrite(Negative_Pins[n], pgm_read_byte(&(FasterGamma8[value_n])));
  }
  
  delay(70);
}
